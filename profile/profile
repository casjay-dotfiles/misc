#!/usr/bin/env sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default path
export PATH="$HOME/.local/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin:/sbin:/usr/games"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bash specific
if [ -n "$BASH_VERSION" ]; then
  export BASH_SILENCE_DEPRECATION_WARNING=1
  export BASH_COMPLETION_USER_DIR="$HOME/.local/share/bash-completion/completions"
  export HISTCONTROL=ignoreboth
  export HISTFILESIZE=10000
  export HISTIGNORE="[bf]g:c:clear:history:exit:q"
  export HISTSIZE=10000
  [ -f "$(command -v direnv 2>/dev/null)" ] && direnv hook bash >/dev/null 2>&1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# zsh specific
elif [ -n "$ZSH_VERSION" ]; then
  export ZDOTDIR="$HOME/.config/zsh"
  export ZSH_CACHEDIR="$HOME/.cache/oh-my-zsh"
  export ZSH="$HOME/.local/share/zsh/oh-my-zsh"
  export ZSH_CUSTOM="$HOME/.local/share/zsh/oh-my-zsh/custom"
  export ZSH_DISABLE_COMPFIX="${ZSH_DISABLE_COMPFIX:-true}"
  export HISTFILE="${ZDOTDIR/.history:-$HOME/.cache/zhistory}"
  export SAVEHIST=5000
  export HISTSIZE=2000
  [ -f "$(command -v direnv 2>/dev/null)" ] && direnv hook zsh >/dev/null 2>&1
  #autoload compinit && compinit
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set umask
#umask 022
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setting the temp directory
export TMP="${TMP:-$HOME/.local/tmp}"
export TEMP="${TEMP:-$HOME/.local/tmp}"
export TMPDIR="${TMPDIR:-$HOME/.local/tmp}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set locale
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL="$LC_ALL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure display
if [ -n "$DISPLAY" ]; then
  if cat /proc/version | grep -iq chromium && [ -n "$DISPLAY_LOW_DENSITY" ]; then
    export DISPLAY="$DISPLAY_LOW_DENSITY"
  fi
  [ -f "$(command -v xrandr 2>/dev/null)" ] && export RESOLUTION="$(xrandr --current | grep '*' | uniq | awk '{print $1}')"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# disable blank screen
if [ -n "$DISPLAY" ] && [ -f "$(command -v xset 2>/dev/null)" ]; then
    xset s off &>/dev/null
    xset -dpms &>/dev/null
    xset s off -dpms &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enviroment variables when using a desktop
if [ -n "$DISPLAY" ] && [ -f "$(command -v dbus-update-activation-environment 2>/dev/null)" ]; then
  dbus-update-activation-environment --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY
  export DBUS_SESSION_BUS_ADDRESS XDG_RUNTIME_DIR
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enable control alt backspace
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  export XKBOPTIONS="terminate:ctrl_alt_bksp"
  [ -f "$(command -v setxkbmap 2>/dev/null)" ] && setxkbmap -model pc104 -layout us -option "terminate:ctrl_alt_bksp"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup modifiers
if [ -n "$DISPLAY" ] && [ -n "$DESKTOP_SESSION" ]; then
  if [ -f "$(command -v ibus 2>/dev/null)" ]; then
    export XMODIFIERS=@im=ibus
    export GTK_IM_MODULE=ibus
    export QT_IM_MODULE=ibus
  elif [ -f "$(command -v fcitx 2>/dev/null)" ]; then
    export XMODIFIERS=@im=fcitx
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# xserver settings
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  if [ ! -f ~/.Xdefaults ]; then
    touch ~/.Xdefaults
  else
    [ -f "$(command -v xrdb 2>/dev/null)" ] && xrdb -merge ~/.Xdefaults 2>/dev/null
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# XDG Settings
export LOGS_DIRECTORY="${LOGDIR:-$HOME/.local/log}"
export STATE_DIRECTORY="$HOME/.local/lib"
export CACHE_DIRECTORY="$HOME/.local/cache"
export RUNTIME_DIRECTORY="$HOME/.local/run"
export CONFIGURATION_DIRECTORY="${CONFIGURATION_DIRECTORY:-$HOME/.config}"
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$RUNTIME_DIRECTORY}"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$CONFIGURATION_DIRECTORY}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ensure .gitconfig exists
if [ -f ~/.config/local/gitconfig.local ] && [ ! -f ~/.gitconfig ]; then
  cp -f ~/.config/local/gitconfig.local ~/.gitconfig
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sudo prompt
case "$(uname -s)" in
Darwin)
  export SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
  ;;
Linux)
  if [ -n "$DESKTOP_SESSION" ] && [ -f "$(command -v dmenupass 2>/dev/null)" ]; then
    export SUDO_ASKPASS="dmenupass"
  else
    export SUDO_ASKPASS="${SUDO_ASKPASS}"
    export SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export gpg tty
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
if [ -f "$(command -v gpg-agent 2>/dev/null)" ]; then
  gpg-agent --enable-ssh-supprt --daemon -q >/dev/null 2>&1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export ssh
if [ ! -S "$HOME/.ssh/ssh_auth_sock" ]; then
  if [ -f "$(command -v ssh-agent 2>/dev/null)" ]; then
    ssh-agent >/dev/null 2>&1
  fi
  ln -sf "${SSH_AUTH_SOCK}" ${HOME}/.ssh/ssh_auth_sock
fi

sshdir="$(find ~/.ssh/id_* 2>/dev/null | wc -l)"
if [ "$sshdir" -ne "0" ]; then
  for f in $(ls ~/.ssh/id_* 2>/dev/null | grep -v '/*.pub'); do
    ssh-add -q "$f" >/dev/null 2>&1
  done
fi
export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-$HOME/.ssh/ssh_auth_sock}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use custom `less` colors for `man` pages.
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add emacs to bin
[ -d $HOME/.emacs.d/bin ] && export PATH="$HOME/.emacs.d/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# rpm devel
export QA_RPATHS="$((0x0001 | 0x0010))"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mpd server
export MPDSERVER="$(hostname -s 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set hostname
export HOSTNAME=$(hostname -f 2>/dev/null)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# notes settings
export NOTES_SERVER_NAME="development"
export NOTES_DIRECTORY="$HOME/.local/share/editors/notes"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create a banner
if [ -f "$(command -v figlet 2>/dev/null)" ]; then
  export BANNER="figlet -f banner"
elif [ -f "$(command -v toilet 2>/dev/null)" ]; then
  export BANNER="toilet -f mono9.tlf"
elif [ -f "$(command -v banner 2>/dev/null)" ]; then
  export BANNER="banner"
else
  export BANNER="echo -e"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup ruby
export GEM_HOME="$HOME/.local/share/gem"
export GEM_PATH="$HOME/.local/share/gem"
export PATH="$GEM_HOME/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ruby Version Manager
if [ -f "$HOME/.local/share/scripts/rvm" ]; then
  export rvm_path="$HOME/.local/share/rvm"
  if [ -f "$HOME/.local/share/rvm/scripts/rvm" ]; then . "$HOME/.local/share/rvm/scripts/rvm"; fi
  if [ -d $HOME/.local/share/rvm/bin ]; then
    export PATH="$HOME/.local/share/rvm/bin:$PATH"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fast Node Manager
export FNM_DIR="$HOME/.local/share/nodejs/fnm"
export FNM_MULTISHELL_PATH="$HOME/.local/bin"
[ -f "$(command -v fnm 2>/dev/null)" ] && fnm env --use-on-cd --fnm-dir="$FNM_DIR"/ &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# node version manager
export NVM_DIR="$HOME/.local/share/nodejs/nvm"
export NVM_BIN="$HOME/.local/bin"
export NO_UPDATE_NOTIFIER="true"
export NODE_REPL_HISTORY_SIZE=10000
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR"/bash_completion
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup setV
export SETV_VIRTUAL_DIR_PATH="$HOME/.local/share/venv/"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure GO
export GOPATH="$HOME/.local/share/go"
export GOBIN="$GOPATH/bin"
export GODIR="$GOPATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add Rust/Cargo to the path
export PATH="$HOME/.cargo/bin:$PATH"
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use hub as git if installed
[ -f "$(command -v hub 2>/dev/null)" ] && eval "$(hub alias -s >/dev/null 2>&1)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export browser
if [ -f "$(command -v garcon-url-handler 2>/dev/null)" ]; then
  export BROWSER="garcon-url-handler --url"
elif [ -f "$(command -v firefox 2>/dev/null)" ]; then
  export BROWSER="firefox"
elif [ -f "$(command -v chromium 2>/dev/null)" ]; then
  export BROWSER="chromium"
elif [ -f "$(command -v google-chrome 2>/dev/null)" ]; then
  export BROWSER="google-chrome"
elif [ -f "$(command -v opera 2>/dev/null)" ]; then
  export BROWSER="opera"
elif [ -f "$(command -v epiphany-browser 2>/dev/null)" ]; then
  export BROWSER="epiphany-browser"
elif [ -f "$(command -v falkon 2>/dev/null)" ]; then
  export BROWSER="falkon"
elif [ -f "$(command -v midori 2>/dev/null)" ]; then
  export BROWSER="midori"
elif [ -f "$(command -v netsurf 2>/dev/null)" ]; then
  export BROWSER="netsurf"
elif [ -f "$(command -v surf 2>/dev/null)" ]; then
  export BROWSER="surf"
elif [ -f "$(command -v arora 2>/dev/null)" ]; then
  export BROWSER="arora"
elif [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
  export BROWSER="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
elif [ -f "/Applications/Firefox.app/Contents/MacOS/firefox-bin" ]; then
  export BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox-bin"
elif [ -f "$(command -v lynx 2>/dev/null)" ]; then
  export BROWSER="lynx"
elif [ -f "$(command -v links 2>/dev/null)" ]; then
  export BROWSER="links"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export terminal
if [ -f "$(command -v termite 2>/dev/null)" ]; then
  export TERMINAL="termite"
elif [ -f "$(command -v xfce4-terminal 2>/dev/null)" ]; then
  export TERMINAL="xfce4-terminal"
elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
  export TERMINAL="qterminal-terminal"
elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
  export TERMINAL="qterminal-terminal"
elif [ -f "$(command -v mate-terminal 2>/dev/null)" ]; then
  export TERMINAL="mate-terminal"
elif [ -f "$(command -v i3-sensible-terminal 2>/dev/null)" ]; then
  export TERMINAL="i3-sensible-terminal"
elif [ -f "$(command -v rofi-sensible-terminal 2>/dev/null)" ]; then
  export TERMINAL="rofi-sensible-terminal"
elif [ -f "$(command -v terminology 2>/dev/null)" ]; then
  export TERMINAL="terminology"
elif [ -f "$(command -v xterm 2>/dev/null)" ]; then
  export TERMINAL="xterm"
elif [ -f "$(command -v uxterm 2>/dev/null)" ]; then
  export TERMINAL="uxterm"
elif [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm" ]; then
  export TERMINAL="/Applications/iTerm.app/Contents/MacOS/iTerm"
elif [ -f "/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal" ]; then
  export TERMINAL="/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# virtual machine manager
if [ -f "$(command -v VirtualBox 2>/dev/null)" ]; then
  export VMMANAGER="VirtualBox"
elif [ -f "$(command -v VMWare 2>/dev/null)" ]; then
  export VMMANAGER="VMWare"
elif [ -f "$(command -v virt-manager 2>/dev/null)" ]; then
  export VMMANAGER="virt-manager"
elif [ -f "$(command -v kubectl 2>/dev/null)" ]; then
  export VMMANAGER="kubectl"
elif [ -f "$(command -v docker 2>/dev/null)" ]; then
  export VMMANAGER="docker"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export torrent client
if [ -f "$(command -v transmission-remote-gtk 2>/dev/null)" ]; then
  export TORRENT="transmission-remote-gtk"
elif [ -f "$(command -v transmission-remote-cli 2>/dev/null)" ]; then
  export TORRENT="transmission-remote-cli"
elif [ -f "$(command -v transmission-gtk 2>/dev/null)" ]; then
  export TORRENT="transmission-gtk"
elif [ -f "$(command -v transmission-qt 2>/dev/null)" ]; then
  export TORRENT="transmission-qt"
elif [ -f "$(command -v deluge 2>/dev/null)" ]; then
  export TORRENT="deluge"
elif [ -f "$(command -v vuze 2>/dev/null)" ]; then
  export TORRENT="vuze"
elif [ -f "$(command -v qbittorrent)" ]; then
  export TORRENT="qbittorrent"
elif [ -f "$(command -v ktorrent 2>/dev/null)" ]; then
  export TORRENT="ktorrent"
elif [ -f "$(command -v ctorrent 2>/dev/null)" ]; then
  export TORRENT="ctorrent"
elif [ -f "$(command -v unworkable 2>/dev/null)" ]; then
  export TORRENT="unworkable"
elif [ -f "$(command -v rtorrent 2>/dev/null)" ]; then
  export TORRENT="rtorrent"
elif [ -f "$(command -v bitstormlite 2>/dev/null)" ]; then
  export TORRENT="bitstormlite"
elif [ -f "/Applications/Transmission.app/Contents/MacOS/Transmission" ]; then
  export TORRENT="/Applications/Transmission.app/Contents/MacOS/Transmission"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export email client
if [ -f "$(command -v thunderbird 2>/dev/null)" ]; then
  export EMAIL="thunderbird"
elif [ -f "$(command -v evolution 2>/dev/null)" ]; then
  export EMAIL="evolution"
elif [ -f "$(command -v clawsmail 2>/dev/null)" ]; then
  export EMAIL="clawsmail"
elif [ -f "$(command -v geary 2>/dev/null)" ]; then
  export EMAIL="geary"
elif [ -f "$(command -v neomutt 2>/dev/null)" ]; then
  export EMAIL="myterminal -e neomutt"
elif [ -f "$(command -v mutt 2>/dev/null)" ]; then
  export EMAIL="myterminal -e mutt"
elif [ -f "$(command -v kmail 2>/dev/null)" ]; then
  export EMAIL="kmail"
elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
  export EMAIL="emacs"
elif [ -f "$(command -v gmail 2>/dev/null)" ]; then
  EMAIL="mybrowser https://gmail.com"
elif [ -f "$(command -v sylpheed 2>/dev/null)" ]; then
  export EMAIL="sylpheed"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export editor
if [ -f "$(command -v code 2>/dev/null)" ]; then
  export EDITOR="code -w"
elif [ -f "$(command -v vscode 2>/dev/null)" ]; then
  export EDITOR="vscode -w"
elif [ -f "$(command -v vim 2>/dev/null)" ]; then
  export EDITOR="vim"
elif [ -f "$(command -v nvim 2>/dev/null)" ]; then
  export EDITOR="nvim"
elif [ -f "$(command -v geany 2>/dev/null)" ]; then
  export EDITOR="geany"
elif [ -f "$(command -v gedit 2>/dev/null)" ]; then
  export EDITOR="gedit"
elif [ -f "$(command -v atom 2>/dev/null)" ]; then
  export EDITOR="atom"
elif [ -f "$(command -v brackets 2>/dev/null)" ]; then
  export EDITOR="brackets"
elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
  export EDITOR="emacs"
elif [ -f "$(command -v mousepad 2>/dev/null)" ]; then
  export EDITOR="mousepad"
elif [ -f "$(command -v nano 2>/dev/null)" ]; then
  export EDITOR="nano"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo config
export TODO_DIR="$HOME/.local/share/editors/todos"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo.sh config
export TODOSH_DIR="$HOME/.local/share/todo"
export TODOTXT_CFG_FILE="$HOME/.config/todo/config"
export TODOTXT_FILE="$HOME/.local/share/todo/todo.txt"
export TODOTXT_DONE_FILE="$HOME/.local/share/todo/done.txt"
export TODOTXT_REPORT_FILE="$HOME/.local/share/todo/report.txt"
[ -f "$TODOTXT_CFG_FILE" ] || touch "$TODOTXT_CFG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export color
CLICOLOR="1"
GREP_COLORS="mt=37;45"
[ -f "$HOME/.config/misc/config/shell/other/ls" ] && . "$HOME/.config/misc/config/shell/other/ls"
export CLICOLOR GREP_COLORS LS_COLORS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup wallpaper directory
export WALLPAPERS="$HOME/.local/share/wallpapers"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lf file manager icons
[ -f "$(command -v lf 2>/dev/null)" ] && [ -f "$HOME/.config/misc/config/shell/other/lf" ] &&
  . "$HOME/.config/misc/config/shell/other/lf" && export LF_ICONS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set term type
export TERM="screen-256color"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# logging
export DEFAULT_LOG="apps"
export LOGDIR="$HOME/.local/log"
export DEFAULT_LOG_DIR="$LOGDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set scripts path if installed manually
if [ -d "$HOME/.local/share/scripts/bin" ]; then
  export PATH="$HOME/.local/share/scripts/bin:$PATH"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#asciinema settings
export ASCIINEMA_API_URL="https://asciinema.org"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cheat.sh settings
export CHTSH_HOME="$HOME/.config/cheatsh"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# task warrior settings
export TASKRC="$HOME/.taskrc"
export TASKDATA="$HOME/.local/share/taskwarrior"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cursor
echo -e -n "\x1b[\x35 q" "\e]12;cyan\a" 2>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# multi_clipboard
if [ -f "$(command -v multi_clipboard)" ]; then
  export SCREENEXCHANGE="$HOME/.screen-exchange"
  export SCREEN_MSGMINWAIT="1"
  export CLIPBOARD="$HOME/.clipboard"
  export CLMAXHIST="20"
  export CLSEP='\x07'
  if [[ "$OSTYPE" =~ linux ]]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [[ "$OSTYPE" =~ cygwin ]]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [[ "$OSTYPE" =~ darwin ]]; then
    if command -v pbcopy >/dev/null 2>&1; then
      export CLXOS="pbcopy"
      export CLX="pbcopy"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MacOS fix
if [[ "$OSTYPE" =~ ^darwin ]]; then
  export HOMEBREW_INSTALL_BADGE="☕️ 🐸"
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export PATH="/usr/local/bin:$PATH:/usr/bin:/usr/local/sbin:/sbin"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create directories
mkdir -p "$HOME/.ssh"
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.local/log"
mkdir -p "$HOME/.local/tmp"
mkdir -p "$HOME/.config/todo"
mkdir -p "$HOME/.config/cheatsh"
mkdir -p "$HOME/.local/share/rvm"
mkdir -p "$HOME/.local/share/gem/bin"
mkdir -p "$HOME/.local/share/nodejs/fnm"
mkdir -p "$HOME/.local/share/nodejs/nvm"
mkdir -p "$HOME/.local/share/wallpapers"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# passmgr settings - add your passmgr setup here
[ -f "$HOME/.config/secure/passmgr.txt" ] && . "$HOME/.config/secure/passmgr.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# github settings - add github settings here
[ -f "$HOME/.config/secure/github.txt" ] && . "$HOME/.config/secure/github.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gitlab settings - add gitlab settings here
[ -f "$HOME/.config/secure/gitlab.txt" ] && . "$HOME/.config/secure/gitlab.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# your private git - add your private git here
[ -f "$HOME/.config/secure/gitpriv.txt" ] && . "$HOME/.config/secure/gitpriv.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add your personal dotfiles repo here
[ -f "$HOME/.config/secure/personal.txt" ] && . "$HOME/.config/secure/personal.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# store API keys here
[ -f "$HOME/.config/secure/apikeys.txt" ] && . "$HOME/.config/secure/apikeys.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import local profile
[ -f "$HOME/.config/local/profile.local" ] && . "$HOME/.config/local/profile.local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import specific profiles for systems
[ -f "$HOME/.config/local/servers/$(hostname -s).local" ]  && . "$HOME/.config/local/servers/$(hostname -s).local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# fix PATH
export PATH="$(echo "$PATH" | tr ':' '\n' | grep -Fv '..' | awk '!seen[$0]++' | tr '\n' ':' | sed 's#::#:.#g')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set profile as sourced
export PROFILERCSRC="$HOME/.profile"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# unset unneeded vars
unset sshdir
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
