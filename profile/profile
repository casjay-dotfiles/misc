#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bash specific
if [ -n "$BASH_VERSION" ]; then
  export BASH_SILENCE_DEPRECATION_WARNING=1
  export BASH_COMPLETION_USER_DIR="$HOME/.local/share/bash-completion/completions"
  export HISTCONTROL=ignoreboth
  export HISTFILESIZE=10000
  export HISTIGNORE="&:[bf]g:c:clear:history:exit:q"
  export HISTSIZE=10000
  [ -f "$(command -v direnv 2>/dev/null)" ] && direnv hook bash >/dev/null 2>&1

# zsh specific
elif [ -n "$ZSH_VERSION" ]; then
  export ZDOTDIR="$HOME/.config/zsh"
  export ZSH_CACHEDIR="$HOME/.cache/oh-my-zsh"
  export ZSH="$HOME/.local/share/zsh/oh-my-zsh"
  export ZSH_CUSTOM="$HOME/.local/share/zsh/oh-my-zsh/custom"
  export ZSH_DISABLE_COMPFIX="${ZSH_DISABLE_COMPFIX:-true}"
  export HISTFILE="${ZDOTDIR/.history:-$HOME/.cache/zhistory}"
  export SAVEHIST=5000
  export HISTSIZE=2000
  [ -f "$(command -v direnv 2>/dev/null)" ] && direnv hook zsh >/dev/null 2>&1
  #autoload compinit && compinit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set umask
#umask 022

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create directories
mkdir -p "$HOME/.ssh"
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.local/log"
mkdir -p "$HOME/.local/tmp"
mkdir -p "$HOME/.config/todo"
mkdir -p "$HOME/.config/cheatsh"
mkdir -p "$HOME/.local/share/rvm"
mkdir -p "$HOME/.local/share/gem/bin"
mkdir -p "$HOME/.local/share/nodejs/fnm"
mkdir -p "$HOME/.local/share/nodejs/nvm"
mkdir -p "$HOME/.local/share/wallpapers"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setting the temp directory
export TMP="${TMP:-$HOME/.local/tmp}"
export TEMP="${TEMP:-$HOME/.local/tmp}"
export TMPDIR="${TMPDIR:-$HOME/.local/tmp}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set locale
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL="${LC_ALL}"
#date_fmt="%a %b %e, %Y %H:%M:%S"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set path
export PATH="$HOME/.local/bin:/usr/local/bin:$PATH:/usr/games"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure display
if [ -n "$DISPLAY" ]; then
  case "$(uname -s)" in
  Linux)
    if cat /proc/version | grep -iq chromium && [ ! -z $DISPLAY ] && [ ! -z $DISPLAY_LOW_DENSITY ]; then
      export DISPLAY="$DISPLAY_LOW_DENSITY"
    fi
    if [ -f "$(command -v xrandr 2>/dev/null)" ]; then export RESOLUTION="$(xrandr --current | grep '*' | uniq | awk '{print $1}')"; fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# disable blank screen
if [ -n "$DISPLAY" ]; then
  case "$(uname -s)" in
  Linux)
    if [ -f "$(command -v xset 2>/dev/null)" ]; then
      xset s off >/dev/null 2>&1
      xset -dpms >/dev/null 2>&1
      xset s off -dpms >/dev/null 2>&1
    fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enviroment variables when using a desktop
if [ -n "$DISPLAY" ]; then
  case "$(uname -s)" in
  Linux)
    if [ -f "$(command -v dbus-update-activation-environment 2>/dev/null)" ]; then
      dbus-update-activation-environment --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY
      export DBUS_SESSION_BUS_ADDRESS XDG_RUNTIME_DIR
    fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enable control alt backspace
if [ -n "$DISPLAY" ]; then
  case "$(uname -s)" in
  Linux)
    export XKBOPTIONS="terminate:ctrl_alt_bksp"
    if [ -f "$(command -v setxkbmap 2>/dev/null)" ]; then setxkbmap -model pc104 -layout us -option "terminate:ctrl_alt_bksp"; fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup modifiers
if [ -n "$DISPLAY" ] && [ -n "$DESKTOP_SESSION" ]; then
  case "$(uname -s)" in
  Linux)
    if [ -f "$(command -v ibus 2>/dev/null)" ]; then
      export XMODIFIERS=@im=ibus
      export GTK_IM_MODULE=ibus
      export QT_IM_MODULE=ibus
    elif [ -f "$(command -v fcitx 2>/dev/null)" ]; then
      export XMODIFIERS=@im=fcitx
      export GTK_IM_MODULE=fcitx
      export QT_IM_MODULE=fcitx
    fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# xserver settings
if [ -n "$DISPLAY" ]; then
  case "$(uname -s)" in
  Linux)
    if [ ! -f ~/.Xdefaults ]; then
      touch ~/.Xdefaults
    else
      if [ -f "$(command -v xrdb 2>/dev/null)" ]; then xrdb ~/.Xdefaults 2>/dev/null; fi
    fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# XDG Settings
case "$(uname -s)" in
Linux)
  export LOGS_DIRECTORY="${LOGDIR:-$HOME/.local/log}"
  export STATE_DIRECTORY="$HOME/.local/lib"
  export CACHE_DIRECTORY="$HOME/.local/cache"
  export RUNTIME_DIRECTORY="$HOME/.local/run"
  export CONFIGURATION_DIRECTORY="${CONFIGURATION_DIRECTORY:-$HOME/.config}"
  export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$RUNTIME_DIRECTORY}"
  export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$CONFIGURATION_DIRECTORY}"
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# xserver settings
if [ -n "$DISPLAY" ]; then
  case "$(uname -s)" in
  Linux)
    if [ ! -f ~/.Xresources ]; then
      touch ~/.Xresources
    else
      if [ -f "$(command -v xrdb 2>/dev/null)" ]; then
        xrdb ~/.Xresources 2>/dev/null
        xrdb -merge ~/.Xresources 2>/dev/null
      fi
    fi
    ;;
  esac
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ensure .gitconfig exists
if [ -f ~/.config/local/gitconfig.local ] && [ ! -f ~/.gitconfig ]; then
  cp -f ~/.config/local/gitconfig.local ~/.gitconfig
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sudo prompt
case "$(uname -s)" in
Darwin)
  export SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
  ;;
Linux)
  if [ -n "$DESKTOP_SESSION" ] && [ -f "$(command -v dmenupass 2>/dev/null)" ]; then
    export SUDO_ASKPASS="dmenupass"
  else
    export SUDO_ASKPASS="${SUDO_ASKPASS}"
    export SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
  fi
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export gpg tty
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
if [ -f "$(command -v gpg-agent 2>/dev/null)" ]; then
  gpg-agent --enable-ssh-supprt --daemon -q >/dev/null 2>&1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export ssh
if [ ! -S "$HOME/.ssh/ssh_auth_sock" ]; then
  if [ -f "$(command -v ssh-agent 2>/dev/null)" ]; then
    ssh-agent >/dev/null 2>&1
  fi
  ln -sf "${SSH_AUTH_SOCK}" ${HOME}/.ssh/ssh_auth_sock
fi

sshdir="$(find ~/.ssh/id_* 2>/dev/null | wc -l)"
if [ "$sshdir" -ne "0" ]; then
  for f in $(ls ~/.ssh/id_* 2>/dev/null | grep -v '/*.pub'); do
    ssh-add -q "$f" >/dev/null 2>&1
  done
fi

export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-$HOME/.ssh/ssh_auth_sock}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use custom `less` colors for `man` pages.
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add emacs to bin
if [ -d $HOME/.emacs.d/bin ]; then
  export PATH="$HOME/.emacs.d/bin:$PATH"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# rpm devel
export QA_RPATHS="$((0x0001 | 0x0010))"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mpd server
export MPDSERVER="$(hostname -s 2>/dev/null)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set hostname
export HOSTNAME=$(hostname -f 2>/dev/null)

# notes settings
export NOTES_SERVER_NAME="development"
export NOTES_DIRECTORY="$HOME/.local/share/editors/notes"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create a banner
if [ -f "$(command -v figlet 2>/dev/null)" ]; then
  export BANNER="figlet -f banner"
elif [ -f "$(command -v toilet 2>/dev/null)" ]; then
  export BANNER="toilet -f mono9.tlf"
elif [ -f "$(command -v banner 2>/dev/null)" ]; then
  export BANNER="banner"
else
  export BANNER="echo -e"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup ruby
export GEM_HOME="$HOME/.local/share/gem"
export GEM_PATH="$HOME/.local/share/gem"
export PATH="$GEM_HOME/bin:$PATH"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ruby Version Manager
if [ -f "$HOME/.local/share/scripts/rvm" ]; then
  export rvm_path="$HOME/.local/share/rvm"
  if [ -f "$HOME/.local/share/rvm/scripts/rvm" ]; then source "$HOME/.local/share/rvm/scripts/rvm"; fi
  if [ -d $HOME/.local/share/rvm/bin ]; then
    export PATH="$HOME/.local/share/rvm/bin:$PATH"
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fast Node Manager
export FNM_DIR="$HOME/.local/share/nodejs/fnm"
export FNM_MULTISHELL_PATH="$HOME/.local/bin"
if [ -f "$(command -v fnm 2>/dev/null)" ]; then fnm env --use-on-cd --fnm-dir="$FNM_DIR"/ >/dev/null 2>&1; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# node version manager
export NVM_DIR="$HOME/.local/share/nodejs/nvm"
export NVM_BIN="$HOME/.local/bin"
export NO_UPDATE_NOTIFIER="true"
export NODE_REPL_HISTORY_SIZE=10000
if [ -s "$NVM_DIR/nvm.sh" ]; then source "$NVM_DIR/nvm.sh"; fi
if [ -s "$NVM_DIR/bash_completion" ]; then source "$NVM_DIR"/bash_completion; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup setV
export SETV_VIRTUAL_DIR_PATH="$HOME/.local/share/venv/"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure GO
export GOPATH="$HOME/.local/share/go"
export GOBIN="$GOPATH/bin"
export GODIR="$GOPATH"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add Rust/Cargo to the path
export PATH="$HOME/.cargo/bin:$PATH"
if [ -f "$HOME/.cargo/env" ]; then source "$HOME/.cargo/env"; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Use hub as git if installed
if [ -f "$(command -v hub 2>/dev/null)" ]; then
  eval "$(hub alias -s >/dev/null 2>&1)"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export browser
if [ -f "$(command -v garcon-url-handler 2>/dev/null)" ]; then
  export BROWSER="garcon-url-handler --url"
elif [ -f "$(command -v firefox 2>/dev/null)" ]; then
  export BROWSER="firefox"
elif [ -f "$(command -v chromium 2>/dev/null)" ]; then
  export BROWSER="chromium"
elif [ -f "$(command -v google-chrome 2>/dev/null)" ]; then
  export BROWSER="google-chrome"
elif [ -f "$(command -v opera 2>/dev/null)" ]; then
  export BROWSER="opera"
elif [ -f "$(command -v epiphany-browser 2>/dev/null)" ]; then
  export BROWSER="epiphany-browser"
elif [ -f "$(command -v falkon 2>/dev/null)" ]; then
  export BROWSER="falkon"
elif [ -f "$(command -v midori 2>/dev/null)" ]; then
  export BROWSER="midori"
elif [ -f "$(command -v netsurf 2>/dev/null)" ]; then
  export BROWSER="netsurf"
elif [ -f "$(command -v surf 2>/dev/null)" ]; then
  export BROWSER="surf"
elif [ -f "$(command -v arora 2>/dev/null)" ]; then
  export BROWSER="arora"
elif [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
  export BROWSER="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
elif [ -f "/Applications/Firefox.app/Contents/MacOS/firefox-bin" ]; then
  export BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox-bin"
elif [ -f "$(command -v lynx 2>/dev/null)" ]; then
  export BROWSER="lynx"
elif [ -f "$(command -v links 2>/dev/null)" ]; then
  export BROWSER="links"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export terminal
if [ -f "$(command -v termite 2>/dev/null)" ]; then
  export TERMINAL="termite"
elif [ -f "$(command -v xfce4-terminal 2>/dev/null)" ]; then
  export TERMINAL="xfce4-terminal"
elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
  export TERMINAL="qterminal-terminal"
elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
  export TERMINAL="qterminal-terminal"
elif [ -f "$(command -v mate-terminal 2>/dev/null)" ]; then
  export TERMINAL="mate-terminal"
elif [ -f "$(command -v i3-sensible-terminal 2>/dev/null)" ]; then
  export TERMINAL="i3-sensible-terminal"
elif [ -f "$(command -v rofi-sensible-terminal 2>/dev/null)" ]; then
  export TERMINAL="rofi-sensible-terminal"
elif [ -f "$(command -v terminology 2>/dev/null)" ]; then
  export TERMINAL="terminology"
elif [ -f "$(command -v xterm 2>/dev/null)" ]; then
  export TERMINAL="xterm"
elif [ -f "$(command -v uxterm 2>/dev/null)" ]; then
  export TERMINAL="uxterm"
elif [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm" ]; then
  export TERMINAL="/Applications/iTerm.app/Contents/MacOS/iTerm"
elif [ -f "/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal" ]; then
  export TERMINAL="/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# virtual machine manager
if [ -f "$(command -v VirtualBox 2>/dev/null)" ]; then
  export VMMANAGER="VirtualBox"
elif [ -f "$(command -v VMWare 2>/dev/null)" ]; then
  export VMMANAGER="VMWare"
elif [ -f "$(command -v virt-manager 2>/dev/null)" ]; then
  export VMMANAGER="virt-manager"
elif [ -f "$(command -v kubectl 2>/dev/null)" ]; then
  export VMMANAGER="kubectl"
elif [ -f "$(command -v docker 2>/dev/null)" ]; then
  export VMMANAGER="docker"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export torrent client
if [ -f "$(command -v transmission-remote-gtk 2>/dev/null)" ]; then
  export TORRENT="transmission-remote-gtk"
elif [ -f "$(command -v transmission-remote-cli 2>/dev/null)" ]; then
  export TORRENT="transmission-remote-cli"
elif [ -f "$(command -v transmission-gtk 2>/dev/null)" ]; then
  export TORRENT="transmission-gtk"
elif [ -f "$(command -v transmission-qt 2>/dev/null)" ]; then
  export TORRENT="transmission-qt"
elif [ -f "$(command -v deluge 2>/dev/null)" ]; then
  export TORRENT="deluge"
elif [ -f "$(command -v vuze 2>/dev/null)" ]; then
  export TORRENT="vuze"
elif [ -f "$(command -v qbittorrent)" ]; then
  export TORRENT="qbittorrent"
elif [ -f "$(command -v ktorrent 2>/dev/null)" ]; then
  export TORRENT="ktorrent"
elif [ -f "$(command -v ctorrent 2>/dev/null)" ]; then
  export TORRENT="ctorrent"
elif [ -f "$(command -v unworkable 2>/dev/null)" ]; then
  export TORRENT="unworkable"
elif [ -f "$(command -v rtorrent 2>/dev/null)" ]; then
  export TORRENT="rtorrent"
elif [ -f "$(command -v bitstormlite 2>/dev/null)" ]; then
  export TORRENT="bitstormlite"
elif [ -f "/Applications/Transmission.app/Contents/MacOS/Transmission" ]; then
  export TORRENT="/Applications/Transmission.app/Contents/MacOS/Transmission"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export email client
if [ -f "$(command -v thunderbird 2>/dev/null)" ]; then
  export EMAIL="thunderbird"
elif [ -f "$(command -v evolution 2>/dev/null)" ]; then
  export EMAIL="evolution"
elif [ -f "$(command -v clawsmail 2>/dev/null)" ]; then
  export EMAIL="clawsmail"
elif [ -f "$(command -v geary 2>/dev/null)" ]; then
  export EMAIL="geary"
elif [ -f "$(command -v neomutt 2>/dev/null)" ]; then
  export EMAIL="myterminal -e neomutt"
elif [ -f "$(command -v mutt 2>/dev/null)" ]; then
  export EMAIL="myterminal -e mutt"
elif [ -f "$(command -v kmail 2>/dev/null)" ]; then
  export EMAIL="kmail"
elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
  export EMAIL="emacs"
elif [ -f "$(command -v gmail 2>/dev/null)" ]; then
  EMAIL="mybrowser https://gmail.com"
elif [ -f "$(command -v sylpheed 2>/dev/null)" ]; then
  export EMAIL="sylpheed"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export editor
if [ -f "$(command -v code 2>/dev/null)" ]; then
  export EDITOR="code -w"
elif [ -f "$(command -v vscode 2>/dev/null)" ]; then
  export EDITOR="vscode -w"
elif [ -f "$(command -v vim 2>/dev/null)" ]; then
  export EDITOR="vim"
elif [ -f "$(command -v nvim 2>/dev/null)" ]; then
  export EDITOR="nvim"
elif [ -f "$(command -v geany 2>/dev/null)" ]; then
  export EDITOR="geany"
elif [ -f "$(command -v gedit 2>/dev/null)" ]; then
  export EDITOR="gedit"
elif [ -f "$(command -v atom 2>/dev/null)" ]; then
  export EDITOR="atom"
elif [ -f "$(command -v brackets 2>/dev/null)" ]; then
  export EDITOR="brackets"
elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
  export EDITOR="emacs"
elif [ -f "$(command -v mousepad 2>/dev/null)" ]; then
  export EDITOR="mousepad"
elif [ -f "$(command -v nano 2>/dev/null)" ]; then
  export EDITOR="nano"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo config
export TODO_DIR="$HOME/.local/share/editors/todos"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo.sh config
export TODOSH_DIR="$HOME/.local/share/todo"
export TODOTXT_CFG_FILE="$HOME/.config/todo/config"
export TODOTXT_FILE="$HOME/.local/share/todo/todo.txt"
export TODOTXT_DONE_FILE="$HOME/.local/share/todo/done.txt"
export TODOTXT_REPORT_FILE="$HOME/.local/share/todo/report.txt"

if [ ! -f "$TODOTXT_CFG_FILE" ]; then
  touch "$TODOTXT_CFG_FILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export color
CLICOLOR="1"
GREP_COLORS="mt=37;45"
LS_COLORS='bd=38;5;68:ca=38;5;17:cd=38;5;113;1:di=38;5;30:do=38;5;127:ex=38;5;208;1:pi=38;5;126:fi=36:ln=01;37;45:mh=38;5;222;1:no=38;5;244;2:or=48;5;196;38;5;232;1:mi=48;5;196;38;5;232;1:ow=38;5;220;1:sg=48;5;3;38;5;0:su=38;5;220;1;3;100;1:so=38;5;197:st=38;5;86;48;5;234:tw=48;5;235;38;5;139;3:ex=38;5;40:*LS_COLORS=48;5;89;38;5;197;1;3;4;7:*.dircolors=48;5;89;38;5;197;1;3;4;7:*README=38;5;220;1:*README.rst=38;5;220;1:*README.md=38;5;220;1:*LICENSE=38;5;220;1:*COPYING=38;5;220;1:*INSTALL=38;5;220;1:*COPYRIGHT=38;5;220;1:*AUTHORS=38;5;220;1:*HISTORY=38;5;220;1:*CONTRIBUTORS=38;5;220;1:*PATENTS=38;5;220;1:*VERSION=38;5;220;1:*NOTICE=38;5;220;1:*CHANGES=38;5;220;1:*.log=38;5;190:*.txt=38;5;253:*.etx=38;5;184:*.info=38;5;184:*.markdown=38;5;184:*.md=38;5;184:*.mkd=38;5;184:*.nfo=38;5;184:*.pod=38;5;184:*.rst=38;5;184:*.tex=38;5;184:*.textile=38;5;184:*.bib=38;5;178:*.json=38;5;178:*.jsonl=38;5;178:*.msg=38;5;178:*.pgn=38;5;178:*.rss=38;5;178:*.xml=38;5;178:*.toml=38;5;178:*.yaml=38;5;178:*.yml=38;5;178:*.RData=38;5;178:*.rdata=38;5;178:*.cbr=38;5;141:*.cbz=38;5;141:*.chm=38;5;141:*.djvu=38;5;141:*.pdf=38;5;141:*.PDF=38;5;141:*.mobi=38;5;141:*.epub=38;5;141:*.docm=38;5;111;4:*.doc=38;5;111:*.docx=38;5;111:*.eps=38;5;111:*.ps=38;5;111:*.odb=38;5;111:*.odt=38;5;111:*.rtf=38;5;111:*.odp=38;5;166:*.pps=38;5;166:*.ppt=38;5;166:*.pptx=38;5;166:*.ppts=38;5;166:*.pptxm=38;5;166;4:*.pptsm=38;5;166;4:*.csv=38;5;78:*.tsv=38;5;78:*.ods=38;5;112:*.xla=38;5;76:*.xls=38;5;112:*.xlsx=38;5;112:*.xlsxm=38;5;112;4:*.xltm=38;5;73;4:*.xltx=38;5;73:*config=38;5;111;4:*cfg=38;5;111;4:*conf=38;5;111;4:*rc=38;5;111;4:*authorized_keys=37;5;111;4:*known_hosts=37;5;111;4:*.ini=38;5;111;4:*.plist=38;5;111;4:*.viminfo=38;5;111;4:*.pcf=38;5;111;4:*.psf=38;5;111;4:*.git=38;5;197:*.gitignore=38;5;240:*.gitattributes=38;5;240:*.gitmodules=38;5;240:*.awk=38;5;172:*.bash=38;5;172:*.bat=38;5;172:*.BAT=38;5;172:*.sed=38;5;172:*.sh=38;5;172:*.zsh=38;5;172:*.vim=38;5;172:*.ahk=38;5;41:*.py=38;5;41:*.ipynb=38;5;41:*.rb=38;5;41:*.gemspec=38;5;41:*.pl=38;5;208:*.PL=38;5;160:*.t=38;5;114:*.msql=38;5;222:*.mysql=38;5;222:*.pgsql=38;5;222:*.sql=38;5;222:*.tcl=38;5;64;1:*.r=38;5;49:*.R=38;5;49:*.gs=38;5;81:*.clj=38;5;41:*.cljs=38;5;41:*.cljc=38;5;41:*.cljw=38;5;41:*.scala=38;5;41:*.dart=38;5;51:*.asm=38;5;81:*.cl=38;5;81:*.lisp=38;5;81:*.lua=38;5;81:*.moon=38;5;81:*.c=38;5;81:*.C=38;5;81:*.h=38;5;110:*.H=38;5;110:*.tcc=38;5;110:*.c++=38;5;81:*.h++=38;5;110:*.hpp=38;5;110:*.hxx=38;5;110:*.ii=38;5;110:*.M=38;5;110:*.m=38;5;110:*.cc=38;5;81:*.cs=38;5;81:*.cp=38;5;81:*.cpp=38;5;81:*.cxx=38;5;81:*.cr=38;5;81:*.go=38;5;81:*.f=38;5;81:*.F=38;5;81:*.for=38;5;81:*.ftn=38;5;81:*.f90=38;5;81:*.F90=38;5;81:*.f95=38;5;81:*.F95=38;5;81:*.f03=38;5;81:*.F03=38;5;81:*.f08=38;5;81:*.F08=38;5;81:*.nim=38;5;81:*.nimble=38;5;81:*.s=38;5;110:*.S=38;5;110:*.rs=38;5;81:*.swift=38;5;219:*.sx=38;5;81:*.vala=38;5;81:*.vapi=38;5;81:*.hi=38;5;110:*.hs=38;5;81:*.lhs=38;5;81:*.agda=38;5;81:*.lagda=38;5;81:*.lagda.tex=38;5;81:*.lagda.rst=38;5;81:*.lagda.md=38;5;81:*.agdai=38;5;110:*.tf=38;5;168:*.tfstate=38;5;168:*.tfvars=38;5;168:*.css=38;5;125;1:*.less=38;5;125;1:*.sass=38;5;125;1:*.scss=38;5;125;1:*.htm=38;5;125;1:*.html=38;5;125;1:*.jhtm=38;5;125;1:*.mht=38;5;125;1:*.eml=38;5;125;1:*.mustache=38;5;125;1:*.coffee=38;5;074;1:*.java=38;5;074;1:*.js=38;5;074;1:*.mjs=38;5;074;1:*.jsm=38;5;074;1:*.jsm=38;5;074;1:*.jsp=38;5;074;1:*.php=38;5;155:*.ctp=38;5;81:*.twig=38;5;81:*.vb=38;5;81:*.vba=38;5;81:*.vbs=38;5;81:*Dockerfile=38;5;155:*.dockerignore=38;5;240:*Makefile=38;5;155:*MANIFEST=38;5;243:*pm_to_blib=38;5;240:*.nix=38;5;155:*.dhall=38;5;178:*.rake=38;5;155:*.am=38;5;242:*.in=38;5;242:*.hin=38;5;242:*.scan=38;5;242:*.m4=38;5;242:*.old=38;5;242:*.out=38;5;242:*.SKIP=38;5;244:*.diff=48;5;197;38;5;232:*.patch=48;5;197;38;5;232;1:*.bmp=38;5;97:*.dicom=38;5;97:*.tiff=38;5;97:*.tif=38;5;97:*.TIFF=38;5;97:*.cdr=38;5;97:*.flif=38;5;97:*.gif=38;5;97:*.ico=38;5;97:*.jpeg=38;5;97:*.JPG=38;5;97:*.jpg=38;5;97:*.nth=38;5;97:*.png=38;5;97:*.psd=38;5;97:*.xpm=38;5;97:*.webp=38;5;97:*.ai=38;5;99:*.eps=38;5;99:*.epsf=38;5;99:*.drw=38;5;99:*.ps=38;5;99:*.svg=38;5;99:*.avi=38;5;114:*.divx=38;5;114:*.IFO=38;5;114:*.m2v=38;5;114:*.m4v=38;5;114:*.mkv=38;5;114:*.MOV=38;5;114:*.mov=38;5;114:*.mp4=38;5;114:*.mpeg=38;5;114:*.mpg=38;5;114:*.ogm=38;5;114:*.rmvb=38;5;114:*.sample=38;5;114:*.wmv=38;5;114:*.3g2=38;5;115:*.3gp=38;5;115:*.gp3=38;5;115:*.webm=38;5;115:*.gp4=38;5;115:*.asf=38;5;115:*.flv=38;5;115:*.ts=38;5;115:*.ogv=38;5;115:*.f4v=38;5;115:*.VOB=38;5;115;1:*.vob=38;5;115;1:*.3ga=38;5;137;1:*.S3M=38;5;137;1:*.aac=38;5;137;1:*.au=38;5;137;1:*.dat=38;5;137;1:*.dts=38;5;137;1:*.fcm=38;5;137;1:*.m4a=38;5;137;1:*.mid=38;5;137;1:*.midi=38;5;137;1:*.mod=38;5;137;1:*.mp3=38;5;137;1:*.mp4a=38;5;137;1:*.oga=38;5;137;1:*.ogg=38;5;137;1:*.opus=38;5;137;1:*.s3m=38;5;137;1:*.sid=38;5;137;1:*.wma=38;5;137;1:*.ape=38;5;136;1:*.aiff=38;5;136;1:*.cda=38;5;136;1:*.flac=38;5;136;1:*.alac=38;5;136;1:*.midi=38;5;136;1:*.pcm=38;5;136;1:*.wav=38;5;136;1:*.wv=38;5;136;1:*.wvc=38;5;136;1:*.afm=38;5;66:*.fon=38;5;66:*.fnt=38;5;66:*.pfb=38;5;66:*.pfm=38;5;66:*.ttf=38;5;66:*.otf=38;5;66:*.PFA=38;5;66:*.pfa=38;5;66:*.7z=38;5;40:*.a=38;5;40:*.arj=38;5;40:*.bz2=38;5;40:*.cpio=38;5;40:*.gz=38;5;40:*.lrz=38;5;40:*.lz=38;5;40:*.lzma=38;5;40:*.lzo=38;5;40:*.rar=38;5;40:*.s7z=38;5;40:*.sz=38;5;40:*.tar=38;5;40:*.tgz=38;5;40:*.xz=38;5;40:*.z=38;5;40:*.zip=38;5;40:*.zipx=38;5;40:*.zoo=38;5;40:*.zpaq=38;5;40:*.zst=38;5;40:*.zz=38;5;40:*.apk=38;5;215:*.deb=38;5;215:*.rpm=38;5;215:*.jad=38;5;215:*.jar=38;5;215:*.cab=38;5;215:*.pak=38;5;215:*.pk3=38;5;215:*.vdf=38;5;215:*.vpk=38;5;215:*.bsp=38;5;215:*.dmg=38;5;215:*.r[0-9]{0,2}=38;5;239:*.zx[0-9]{0,2}=38;5;239:*.z[0-9]{0,2}=38;5;239:*.part=38;5;239:*.dmg=38;5;124:*.iso=38;5;124:*.bin=38;5;124:*.nrg=38;5;124:*.qcow=38;5;124:*.sparseimage=38;5;124:*.toast=38;5;124:*.vcd=38;5;124:*.vmdk=38;5;124:*.accdb=38;5;60:*.accde=38;5;60:*.accdr=38;5;60:*.accdt=38;5;60:*.db=38;5;60:*.fmp12=38;5;60:*.fp7=38;5;60:*.localstorage=38;5;60:*.mdb=38;5;60:*.mde=38;5;60:*.sqlite=38;5;60:*.typelib=38;5;60:*.nc=38;5;60:*.pacnew=38;5;33:*.un~=38;5;241:*.orig=38;5;241:*.BUP=38;5;241:*.bak=38;5;241:*.o=38;5;241:*core=38;5;241:*.rlib=38;5;241:*.swp=38;5;244:*.swo=38;5;244:*.tmp=38;5;244:*.sassc=38;5;244:*.pid=38;5;248:*.state=38;5;248:*lockfile=38;5;248:*lock=38;5;248:*.err=38;5;160;1:*.error=38;5;160;1:*.stderr=38;5;160;1:*.aria2=38;5;241:*.dump=38;5;241:*.stackdump=38;5;241:*.zcompdump=38;5;241:*.zwc=38;5;241:*.pcap=38;5;29:*.cap=38;5;29:*.dmp=38;5;29:*.DS_Store=38;5;239:*.localized=38;5;239:*.CFUserTextEncoding=38;5;239:*.allow=38;5;112:*.deny=38;5;196:*.service=38;5;45:*@.service=38;5;45:*.socket=38;5;45:*.swap=38;5;45:*.device=38;5;45:*.mount=38;5;45:*.automount=38;5;45:*.target=38;5;45:*.path=38;5;45:*.timer=38;5;45:*.snapshot=38;5;45:*.application=38;5;116:*.cue=38;5;116:*.description=38;5;116:*.directory=38;5;116:*.m3u=38;5;116:*.m3u8=38;5;116:*.md5=38;5;116:*.properties=38;5;116:*.sfv=38;5;116:*.srt=38;5;116:*.sub=38;5;116:*.theme=38;5;116:*.torrent=38;5;116:*.urlview=38;5;116:*.asc=38;5;192;3:*.bfe=38;5;192;3:*.enc=38;5;192;3:*.gpg=38;5;192;3:*.signature=38;5;192;3:*.sig=38;5;192;3:*.p12=38;5;192;3:*.pem=38;5;192;3:*.pgp=38;5;192;3:*.asc=38;5;192;3:*.enc=38;5;192;3:*.sig=38;5;192;3:*.p7s=38;5;192;3:*id_dsa=38;5;192;3:*id_rsa=38;5;192;3:*id_ecdsa=38;5;192;3:*id_ed25519=38;5;192;3:*.32x=38;5;213:*.cdi=38;5;213:*.fm2=38;5;213:*.rom=38;5;213:*.sav=38;5;213:*.st=38;5;213:*.a00=38;5;213:*.a52=38;5;213:*.A64=38;5;213:*.a64=38;5;213:*.a78=38;5;213:*.adf=38;5;213:*.atr=38;5;213:*.gb=38;5;213:*.gba=38;5;213:*.gbc=38;5;213:*.gel=38;5;213:*.gg=38;5;213:*.ggl=38;5;213:*.ipk=38;5;213:*.j64=38;5;213:*.nds=38;5;213:*.nes=38;5;213:*.sms=38;5;213:*.pot=38;5;7:*.pcb=38;5;7:*.mm=38;5;7:*.pod=38;5;7:*.gbr=38;5;7:*.scm=38;5;7:*.xcf=38;5;7:*.spl=38;5;7:*.Rproj=38;5;11:*.sis=38;5;7:*.1p=38;5;7:*.3p=38;5;7:*.cnc=38;5;7:*.def=38;5;7:*.ex=38;5;7:*.example=38;5;7:*.feature=38;5;7:*.ger=38;5;7:*.map=38;5;7:*.mf=38;5;7:*.mfasl=38;5;7:*.mi=38;5;7:*.mtx=38;5;7:*.pc=38;5;7:*.pi=38;5;7:*.plt=38;5;7:*.pm=38;5;7:*.rdf=38;5;7:*.ru=38;5;7:*.sch=38;5;7:*.sty=38;5;7:*.sug=38;5;7:*.t=38;5;7:*.tdy=38;5;7:*.tfm=38;5;7:*.tfnt=38;5;7:*.tg=38;5;7:*.vcard=38;5;7:*.vcf=38;5;7:*.xln=38;5;7:*.iml=38;5;166:*.xcconfig=38;5;111;4:*.entitlements=38;5;111;4:*.strings=38;5;111;4:*.storyboard=38;5;196:*.xcsettings=38;5;111;4:*.xib=38;5;208:'

export CLICOLOR GREP_COLORS LS_COLORS

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup wallpaper directory
export WALLPAPERS="$HOME/.local/share/wallpapers"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lf file manager icons
if [ -f "$(command -v lf 2>/dev/null)" ]; then
  export LF_ICONS='di=:fi=:ln=:or=:ex=:*.c=:*.cc=:*.clj=:*.coffee=:*.cpp=:*.css=:*.d=:*.dart=:*.erl=:*.exs=:*.fs=:*.go=:*.h=:*.hh=:*.hpp=:*.hs=:*.html=:*.java=:*.jl=:*.js=:*.json=:*.lua=:*.md=:*.php=:*.pl=:*.pro=:*.py=:*.rb=:*.rs=:*.scala=:*.ts=:*.vim=:*.cmd=:*.ps1=:*.sh=:*.bash=:*.zsh=:*.fish=:*.tar=:*.tgz=:*.arc=:*.arj=:*.taz=:*.lha=:*.lz4=:*.lzh=:*.lzma=:*.tlz=:*.txz=:*.tzo=:*.t7z=:*.zip=:*.z=:*.dz=:*.gz=:*.lrz=:*.lz=:*.lzo=:*.xz=:*.zst=:*.tzst=:*.bz2=:*.bz=:*.tbz=:*.tbz2=:*.tz=:*.deb=:*.rpm=:*.jar=:*.war=:*.ear=:*.sar=:*.rar=:*.alz=:*.ace=:*.zoo=:*.cpio=:*.7z=:*.rz=:*.cab=:*.wim=:*.swm=:*.dwm=:*.esd=:*.jpg=:*.jpeg=:*.mjpg=:*.mjpeg=:*.gif=:*.bmp=:*.pbm=:*.pgm=:*.ppm=:*.tga=:*.xbm=:*.xpm=:*.tif=:*.tiff=:*.png=:*.svg=:*.svgz=:*.mng=:*.pcx=:*.mov=:*.mpg=:*.mpeg=:*.m2v=:*.mkv=:*.webm=:*.ogm=:*.mp4=:*.m4v=:*.mp4v=:*.vob=:*.qt=:*.nuv=:*.wmv=:*.asf=:*.rm=:*.rmvb=:*.flc=:*.avi=:*.fli=:*.flv=:*.gl=:*.dl=:*.xcf=:*.xwd=:*.yuv=:*.cgm=:*.emf=:*.ogv=:*.ogx=:*.aac=:*.au=:*.flac=:*.m4a=:*.mid=:*.midi=:*.mka=:*.mp3=:*.mpc=:*.ogg=:*.ra=:*.wav=:*.oga=:*.opus=:*.spx=:*.xspf=:*.pdf='
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set term type
export TERM="screen-256color"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# logging
export DEFAULT_LOG="apps"
export LOGDIR="$HOME/.local/log"
export DEFAULT_LOG_DIR="$LOGDIR"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ]; then
  export PATH="$HOME/.local/bin:$PATH"
fi

# Set scripts path if installed manually
if [ -d "$HOME/.local/share/scripts/bin" ]; then
  export PATH="$HOME/.local/share/scripts/bin:$PATH"
fi

#asciinema settings
export ASCIINEMA_API_URL="https://asciinema.org"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cheat.sh settings
export CHTSH_HOME="$HOME/.config/cheatsh"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# task warrior settings

export TASKRC="$HOME/.taskrc"
export TASKDATA="$HOME/.local/share/taskwarrior"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cursor
if [ -n "$BASH_VERSION" ]; then
  echo -e -n "\x1b[\x35 q"
  echo -e -n "\e]12;white\a"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# multi_clipboard
if [ -f "$(command -v multi_clipboard)" ]; then
  export SCREENEXCHANGE="$HOME/.screen-exchange"
  export SCREEN_MSGMINWAIT="1"
  export CLIPBOARD="$HOME/.clipboard"
  export CLMAXHIST="20"
  export CLSEP='\x07'
  if [[ "$OSTYPE" =~ linux ]]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [[ "$OSTYPE" =~ cygwin ]]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [[ "$OSTYPE" =~ darwin ]]; then
    if command -v pbcopy >/dev/null 2>&1; then
      export CLXOS="pbcopy"
      export CLX="pbcopy"
    fi
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# unset unneeded vars
unset sshdir

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Make sure sbin gets added to the path
export PATH="$PATH:/usr/bin:/usr/local/sbin:/sbin"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MacOS fix
if [[ "$OSTYPE" =~ ^darwin ]]; then
  export HOMEBREW_INSTALL_BADGE="☕️ 🐸"
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export PATH="/usr/local/bin:$PATH:/usr/bin:/usr/local/sbin:/sbin"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# passmgr settings - add your passmgr setup here
if [ -f "$HOME/.config/secure/passmgr.txt" ]; then
  . "$HOME/.config/secure/passmgr.txt"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# github settings - add github settings here
if [ -f "$HOME/.config/secure/github.txt" ]; then
  . "$HOME/.config/secure/github.txt"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gitlab settings - add gitlab settings here
if [ -f "$HOME/.config/secure/gitlab.txt" ]; then
  . "$HOME/.config/secure/gitlab.txt"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# your private git - add your private git here
if [ -f "$HOME/.config/secure/gitpriv.txt" ]; then
  . "$HOME/.config/secure/gitpriv.txt"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add your personal dotfiles repo here
if [ -f "$HOME/.config/secure/personal.txt" ]; then
  . "$HOME/.config/secure/personal.txt"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# store API keys here
if [ -f "$HOME/.config/secure/apikeys.txt" ]; then
  . "$HOME/.config/secure/apikeys.txt"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import local profile
if [ -f "$HOME/.config/local/profile.local" ]; then
  . "$HOME/.config/local/profile.local"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import specific profiles for systems
if [ -f "$HOME/.config/local/servers/$(hostname -s).local" ]; then
  . "$HOME/.config/local/servers/$(hostname -s).local"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# fix PATH
export PATH="$(echo "$PATH" | tr ':' '\n' | grep -Fv '..' | awk '!seen[$0]++' | tr '\n' ':' | sed 's#::#:.#g')"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set profile as sourced
export PROFILERCSRC="$HOME/.profile"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#return $?
# end
