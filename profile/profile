#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default path
PATH="$HOME/.local/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin:/sbin:/usr/games"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set default prompt
PS1="\u@\H $ "
export PS1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# sh specific
if [ -n "$SH_VERSION" ]; then
  SHELL="$(command -v sh)"
  export SHELL
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bash specific
elif [ -n "$BASH_VERSION" ]; then
  SHELL="$(command -v bash)"
  BASH_SILENCE_DEPRECATION_WARNING="1"
  BASH_COMPLETION_USER_DIR="$HOME/.local/share/bash-completion/completions"
  HISTCONTROL="ignoreboth"
  HISTFILESIZE="5000"
  HISTIGNORE="[bf]g:c:clear:history:exit:q"
  HISTSIZE="50000"
  export SHELL BASH_SILENCE_DEPRECATION_WARNING BASH_COMPLETION_USER_DIR
  export HISTCONTROL HISTFILESIZE HISTIGNORE HISTSIZE
  [ -f "$(command -v direnv 2>/dev/null)" ] && direnv hook bash >/dev/null 2>&1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# zsh specific
elif [ -n "$ZSH_VERSION" ]; then
  SHELL="$(command -v zsh)"
  ZDOTDIR="$HOME/.config/zsh"
  ZSH_CACHEDIR="$HOME/.cache/oh-my-zsh"
  ZSH="$HOME/.local/share/zsh/oh-my-zsh"
  ZSH_CUSTOM="$HOME/.local/share/zsh/oh-my-zsh/custom"
  ZSH_DISABLE_COMPFIX="${ZSH_DISABLE_COMPFIX:-true}"
  HISTFILE="${ZDOTDIR/.history:-$HOME/.cache/zhistory}"
  SAVEHIST=5000
  HISTSIZE=2000
  export SHELL ZDOTDIR ZSH_CACHEDIR ZSH ZSH_CUSTOM ZSH_DISABLE_COMPFIX HISTFILE SAVEHIST HISTSIZE
  [ -f "$(command -v direnv 2>/dev/null)" ] && direnv hook zsh >/dev/null 2>&1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set umask
#umask 022
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setting the temp directory
export TMP="${TMP:-$HOME/.local/tmp}"
export TEMP="${TEMP:-$HOME/.local/tmp}"
export TMPDIR="${TMPDIR:-$HOME/.local/tmp}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set locale
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL="$LC_ALL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure display
if [ -n "$DISPLAY" ]; then
  if grep -iq chromium /proc/version && [ -n "$DISPLAY_LOW_DENSITY" ]; then
    DISPLAY="$DISPLAY_LOW_DENSITY"
  fi
  [ -f "$(command -v xrandr 2>/dev/null)" ] && RESOLUTION="$(xrandr --current 2>/dev/null | grep '*' | uniq | awk '{print $1}')"
fi
export DISPLAY RESOLUTION
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# disable blank screen
if [ -n "$DISPLAY" ] && [ -f "$(command -v xset 2>/dev/null)" ]; then
  xset s off &>/dev/null
  xset -dpms &>/dev/null
  xset s off -dpms &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enviroment variables when using a desktop
if [ -z "$SSH_CONNECTION" ] && [ -n "$DISPLAY" ] && [ -f "$(command -v dbus-update-activation-environment 2>/dev/null)" ]; then
  dbus-update-activation-environment --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY 2>/dev/null
  export DBUS_SESSION_BUS_ADDRESS XDG_RUNTIME_DIR
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enable control alt backspace
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  export XKBOPTIONS="terminate:ctrl_alt_bksp"
  [ -f "$(command -v setxkbmap 2>/dev/null)" ] && setxkbmap -model pc104 -layout us -option "terminate:ctrl_alt_bksp" 2>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup modifiers
if [ -n "$DISPLAY" ] && [ -n "$DESKTOP_SESSION" ]; then
  if [ -f "$(command -v ibus 2>/dev/null)" ]; then
    export XMODIFIERS=@im=ibus
    export GTK_IM_MODULE=ibus
    export QT_IM_MODULE=ibus
  elif [ -f "$(command -v fcitx 2>/dev/null)" ]; then
    export XMODIFIERS=@im=fcitx
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# xserver settings
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  [ -f ~/.Xdefaults ] || touch ~/.Xdefaults
  [ -f "$(command -v xrdb 2>/dev/null)" ] && xrdb -merge ~/.Xdefaults 2>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# XDG Settings
export LOGS_DIRECTORY="${LOGDIR:-$HOME/.local/log}"
export STATE_DIRECTORY="$HOME/.local/lib"
export CACHE_DIRECTORY="$HOME/.local/cache"
export RUNTIME_DIRECTORY="$HOME/.local/run"
export CONFIGURATION_DIRECTORY="${CONFIGURATION_DIRECTORY:-$HOME/.config}"
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$RUNTIME_DIRECTORY}"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$CONFIGURATION_DIRECTORY}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ensure .gitconfig exists
[ -f ~/.config/local/gitconfig.local ] && [ ! -f ~/.gitconfig ] && cp -f "$HOME/.config/local/gitconfig.local" "$HOME/.gitconfig"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sudo prompt
if [ "$(uname -s)" = Linux ] && [ -n "$DESKTOP_SESSION" ] && [ -f "$(command -v dmenupass 2>/dev/null)" ]; then
  SUDO_ASKPASS="$(command -v dmenupass 2>/dev/null)"
else
  SUDO_ASKPASS="$SUDO_ASKPASS"
fi
SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
export SUDO_PROMPT SUDO_ASKPASS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export gpg tty
GPG_TTY="$(tty)"
SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
[ -f "$(command -v gpg-agent 2>/dev/null)" ] &&
  gpg-agent --enable-ssh-support --daemon -q &>/dev/null
export GPG_TTY SSH_AUTH_SOCK
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export ssh
if [ ! -S "$HOME/.ssh/ssh_auth_sock" ]; then
  if [ -f "$(command -v ssh-agent 2>/dev/null)" ]; then
    ssh-agent &>/dev/null
  fi
  [ -n "$SSH_AUTH_SOCK" ] && ln -sf "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh_auth_sock"
fi
if [ "$(find ~/.ssh/id_* 2>/dev/null | wc -l)" -ne "0" ]; then
  for f in $(find ~/.ssh/id_* 2>/dev/null | grep -v '/*.pub'); do
    ssh-add -q "$f" &>/dev/null
  done
fi
export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-$HOME/.ssh/ssh_auth_sock}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use custom `less` colors for `man` pages.
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add emacs to bin
[ -d "$HOME/.emacs.d/bin" ] && PATH="$HOME/.emacs.d/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# rpm devel
export QA_RPATHS="$((0x0001 | 0x0010))"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mpd server
MPDSERVER="$(hostname -s 2>/dev/null)"
export MPDSERVER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set hostname
HOSTNAME="$(hostname -f 2>/dev/null)"
export HOSTNAME
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# notes settings
export NOTES_SERVER_NAME="development"
export NOTES_DIRECTORY="$HOME/.local/share/editors/notes"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create a banner
if [ -f "$(command -v figlet 2>/dev/null)" ]; then
  export BANNER="figlet -f banner"
elif [ -f "$(command -v toilet 2>/dev/null)" ]; then
  export BANNER="toilet -f mono9.tlf"
elif [ -f "$(command -v banner 2>/dev/null)" ]; then
  export BANNER="banner"
else
  export BANNER="echo -e"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup ruby
export GEM_HOME="$HOME/.local/share/gem"
export GEM_PATH="$HOME/.local/share/gem"
PATH="$GEM_HOME/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ruby Version Manager
[ -f "$HOME/.local/share/scripts/rvm" ] && export rvm_path="$HOME/.local/share/rvm"
[ -f "$HOME/.local/share/rvm/scripts/rvm" ] && . "$HOME/.local/share/rvm/scripts/rvm"
[ -d "$HOME/.local/share/rvm/bin" ] && PATH="$HOME/.local/share/rvm/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fast Node Manager
export FNM_DIR="$HOME/.local/share/nodejs/fnm"
export FNM_MULTISHELL_PATH="$HOME/.local/bin"
[ -f "$(command -v fnm 2>/dev/null)" ] && fnm env --use-on-cd --fnm-dir="$FNM_DIR"/ &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# node version manager
export NVM_DIR="$HOME/.local/share/nodejs/nvm"
export NVM_BIN="$HOME/.local/bin"
export NO_UPDATE_NOTIFIER="true"
export NODE_REPL_HISTORY_SIZE=10000
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup setV
export SETV_VIRTUAL_DIR_PATH="$HOME/.local/share/venv/"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure GO
export GOPATH="$HOME/.local/share/go"
export GOBIN="$GOPATH/bin"
export GODIR="$GOPATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add Rust/Cargo to the path
[ -d "$HOME/.cargo" ] && PATH="$HOME/.cargo/bin:$PATH"
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use hub as git if installed
[ -f "$(command -v hub 2>/dev/null)" ] && eval "$(hub alias -s >/dev/null 2>&1)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export browser
if [ -f "$(command -v mybrowser 2>/dev/null)" ]; then
  BROWSER="mybrowser"
elif [ -f "$(command -v garcon-url-handler 2>/dev/null)" ]; then
  BROWSER="garcon-url-handler --url"
elif [ -f "$(command -v firefox 2>/dev/null)" ]; then
  BROWSER="firefox"
elif [ -f "$(command -v chromium 2>/dev/null)" ]; then
  BROWSER="chromium"
elif [ -f "$(command -v google-chrome 2>/dev/null)" ]; then
  BROWSER="google-chrome"
elif [ -f "$(command -v opera 2>/dev/null)" ]; then
  BROWSER="opera"
elif [ -f "$(command -v epiphany-browser 2>/dev/null)" ]; then
  BROWSER="epiphany-browser"
elif [ -f "$(command -v falkon 2>/dev/null)" ]; then
  BROWSER="falkon"
elif [ -f "$(command -v midori 2>/dev/null)" ]; then
  BROWSER="midori"
elif [ -f "$(command -v netsurf 2>/dev/null)" ]; then
  BROWSER="netsurf"
elif [ -f "$(command -v surf 2>/dev/null)" ]; then
  BROWSER="surf"
elif [ -f "$(command -v arora 2>/dev/null)" ]; then
  BROWSER="arora"
elif [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
  BROWSER="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
elif [ -f "/Applications/Firefox.app/Contents/MacOS/firefox-bin" ]; then
  BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox-bin"
elif [ -f "$(command -v lynx 2>/dev/null)" ]; then
  BROWSER="lynx"
elif [ -f "$(command -v links 2>/dev/null)" ]; then
  BROWSER="links"
fi
export BROWSER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export terminal
if [ -f "$(command -v myterminal 2>/dev/null)" ]; then
  TERMINAL="myterminal"
elif [ -f "$(command -v termite 2>/dev/null)" ]; then
  TERMINAL="termite"
elif [ -f "$(command -v xfce4-terminal 2>/dev/null)" ]; then
  TERMINAL="xfce4-terminal"
elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
  TERMINAL="qterminal-terminal"
elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
  TERMINAL="qterminal-terminal"
elif [ -f "$(command -v mate-terminal 2>/dev/null)" ]; then
  TERMINAL="mate-terminal"
elif [ -f "$(command -v i3-sensible-terminal 2>/dev/null)" ]; then
  TERMINAL="i3-sensible-terminal"
elif [ -f "$(command -v rofi-sensible-terminal 2>/dev/null)" ]; then
  TERMINAL="rofi-sensible-terminal"
elif [ -f "$(command -v terminology 2>/dev/null)" ]; then
  TERMINAL="terminology"
elif [ -f "$(command -v xterm 2>/dev/null)" ]; then
  TERMINAL="xterm"
elif [ -f "$(command -v uxterm 2>/dev/null)" ]; then
  TERMINAL="uxterm"
elif [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm" ]; then
  TERMINAL="/Applications/iTerm.app/Contents/MacOS/iTerm"
elif [ -f "/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal" ]; then
  TERMINAL="/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal"
fi
export TERMINAL
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export file manager
[ -f "$(command -v myfilemanager 2>/dev/null)" ] && FILEMANAGER="myfilemanager" ||
  FILEMANAGER="$(command -v thunar || command -v vifm || command -v se)"
export FILEMANAGER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# virtual machine manager
[ -f "$(command -v myvmmanager 2>/dev/null)" ] && VMMANAGER="myvmmanager" || VMMANAGER="virt-manager"
export VMMANAGER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export torrent client
[ -f "$(command -v mytorrent 2>/dev/null)" ] && TORRENT="mytorrent" || TORRENT="transmission-remote-gtk"
[ "$(uname -s)" = Darwin ] && TORRENT="/Applications/Transmission.app/Contents/MacOS/Transmission"
export TORRENT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export email client
[ -f "$(command -v myemail 2>/dev/null)" ] && EMAIL="myemail" || EMAIL="thunderbird"
export EMAIL
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export editor
[ -f "$(command -v myeditor 2>/dev/null)" ] && EDITOR="myeditor" || EDITOR="vim"
export EDITOR
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export git version format
export VERSION_DATE_FORMAT="%Y%m%d%H%M-git"
# export todo config
export TODO_DIR="$HOME/.local/share/editors/todos"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo.sh config
export TODOSH_DIR="$HOME/.local/share/todo"
export TODOTXT_CFG_FILE="$HOME/.config/todo/config"
export TODOTXT_FILE="$HOME/.local/share/todo/todo.txt"
export TODOTXT_DONE_FILE="$HOME/.local/share/todo/done.txt"
export TODOTXT_REPORT_FILE="$HOME/.local/share/todo/report.txt"
[ -f "$TODOTXT_CFG_FILE" ] || touch "$TODOTXT_CFG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export color
CLICOLOR="1"
GREP_COLORS='mt=37;45'
[ -f "$HOME/.config/misc/shell/other/ls" ] && . "$HOME/.config/misc/shell/other/ls"
export CLICOLOR GREP_COLORS LS_COLORS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup wallpaper directory
export WALLPAPERS="$HOME/.local/share/wallpapers"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lf file manager icons
[ -f "$(command -v lf 2>/dev/null)" ] && [ -f "$HOME/.config/misc/shell/other/lf" ] && . "$HOME/.config/misc/shell/other/lf"
export LF_ICONS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set term type
export TERM="screen-256color"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# logging
export DEFAULT_LOG="apps"
export LOGDIR="$HOME/.local/log"
export DEFAULT_LOG_DIR="$LOGDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set scripts path if installed manually
[ -d "$HOME/.local/share/scripts/bin" ] && PATH="$HOME/.local/share/scripts/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#asciinema settings
export ASCIINEMA_API_URL="https://asciinema.org"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cheat.sh settings
export CHTSH_HOME="$HOME/.config/cheatsh"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# task warrior settings
export TASKRC="$HOME/.taskrc"
export TASKDATA="$HOME/.local/share/taskwarrior"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cursor
echo -e -n "\x1b[\x35 q" 2>/dev/null
echo -e -n "\e]12;cyan\a" 2>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# multi_clipboard
if [ -f "$(command -v multi_clipboard)" ]; then
  export SCREENEXCHANGE="$HOME/.screen-exchange"
  export SCREEN_MSGMINWAIT="1"
  export CLIPBOARD="$HOME/.clipboard"
  export CLMAXHIST="20"
  export CLSEP='\x07'
  if [ "$(uname -s)" = Linux ]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [ "$(uname -s)" = cygwin ]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [ "$(uname -s)" = Darwin ]; then
    if command -v pbcopy >/dev/null 2>&1; then
      export CLXOS="pbcopy"
      export CLX="pbcopy"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MacOS fix
if [ "$(uname -s)" = Darwin ]; then
  HOMEBREW_INSTALL_BADGE="☕️ 🐸"
  HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export HOMEBREW_INSTALL_BADGE HOMEBREW_CASK_OPTS
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create directories
mkdir -p "$HOME/.ssh/known_hosts.d"
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.local/log"
mkdir -p "$HOME/.local/tmp"
mkdir -p "$HOME/.config/todo"
mkdir -p "$HOME/.config/local"
mkdir -p "$HOME/.config/secure"
mkdir -p "$HOME/.config/cheatsh"
mkdir -p "$HOME/.local/share/rvm"
mkdir -p "$HOME/.local/share/gem/bin"
mkdir -p "$HOME/.local/share/nodejs/fnm"
mkdir -p "$HOME/.local/share/nodejs/nvm"
mkdir -p "$HOME/.local/share/wallpapers"
mkdir -p "$TMPDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# passmgr settings - add your passmgr setup here
[ -f "$HOME/.config/secure/passmgr.txt" ] && . "$HOME/.config/secure/passmgr.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# github settings - add github settings here
[ -f "$HOME/.config/secure/github.txt" ] && . "$HOME/.config/secure/github.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gitlab settings - add gitlab settings here
[ -f "$HOME/.config/secure/gitlab.txt" ] && . "$HOME/.config/secure/gitlab.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# your private git - add your private git here
[ -f "$HOME/.config/secure/gitpriv.txt" ] && . "$HOME/.config/secure/gitpriv.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add your personal dotfiles repo here
[ -f "$HOME/.config/secure/personal.txt" ] && . "$HOME/.config/secure/personal.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# store API keys here
[ -f "$HOME/.config/secure/apikeys.txt" ] && . "$HOME/.config/secure/apikeys.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import local profile
[ -f "$HOME/.config/local/profile.local" ] && . "$HOME/.config/local/profile.local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import specific profiles for systems
[ -f "$HOME/.config/local/servers/$(hostname -s).local" ] && . "$HOME/.config/local/servers/$(hostname -s).local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# fix PATH
PATH="$(echo "$PATH" | tr ':' '\n' | grep -Fv '..' | awk '!seen[$0]++' | tr '\n' ':' | sed 's#::#:.#g')"
export PATH
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set profile as sourced
PROFILERCSRC="$HOME/.profile"
export PROFILERCSRC
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Autolanch application on ssh connection
if [ -n "$SSH_CONNECTION" ] && [ -f "$HOME/.config/misc/shell/other/ssh" ]; then
  . "$HOME/.config/misc/shell/other/ssh"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# unset unneeded vars

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
