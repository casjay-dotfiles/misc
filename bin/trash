#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : trash-put
# @Created     : Mon, Dec 31, 2019, 00:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : delete files and folders
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
if [[ -f "$DIR/functions.bash" ]]; then
  source "$DIR/functions.bash"
else
  echo -e "\t\tCouldn't source the functions file"
  exit 1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__help() {
  echo
  printf_help "Usage: trash file | trash restore file\n"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#fileext="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)"

TrashDir="${TRASH_DIR:-$HOME/.local/share/Trash}"
RestoreDir="${RESTORE_DIR:-$HOME/Desktop/restored}"

get_name() {
  if [ -d "$1" ]; then
    dirname="$(dirname $(echo $PWD/$1) 2>/dev/null || return 1)"
  else
    dirname="$(dirname $(ls -A $1) 2>/dev/null || return 1)"
  fi
  files=$(basename "$1")
  while [ "$files" ]; do
    file=${files%%;*}
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
    echo "$dirname/$file"
  done
}

filename_trash() { get_name "$1" | sed 's#/#_-_#g'; }
filename_restore() { grep Path "$TrashDir/info/$1.trashinfo" | sed 's#Path=##g' | sed 's#"##g'; }

create_trash_file() {
  cat <<EOF >"$TrashDir/info/$(filename_trash "$1")-$(basename "$1").trashinfo"
[Trash Info]
Path="$(get_name "$1")"
DeletionDate="$(date +'%Y-%m-%d-T%H:%M:%S')"
EOF
}

trash-put() {
  for t in "$@"; do
    file="$t"
    create_trash_file "$file"
    rsync -a "$file" "$TrashDir/files/$(filename_trash "$file")-$(basename "$file")"
    rm -Rf "$file"
  done
}

trash-restore() {
  for r in "$@"; do
    file="$(basename "$r")"
    restorefile="$(filename_restore "$file")"
    if [ -e "$TrashDir/files/$file" ]; then
      restorename="$(echo "$restorefile" | sed 's#^/##g')"
      mkd "$RestoreDir/$(dirname "$restorename")"
      rsync -a "$TrashDir/files/$file" "$RestoreDir/$restorename" &&
        rm -Rf "$TrashDir/files/$file" "$TrashDir/info/$file.trashinfo" &&
        printf_green "Restored: $file to $RestoreDir/$restorename" ||
        printf_exit "Failed to restore $file to $RestoreDir/$restorename"
    else
      printf_red "$file doesn't exist"
    fi
  done
}

trash-list() {
  if [ "$(ls "$TrashDir/files/" | wc -l)" = 0 ]; then
    printf_green "There are no files in your Trash"
  else
    if [ $# = 0 ]; then
      ls -A "$TrashDir/files"
    else
      for ls in "$@"; do
        ls -a "$TrashDir/files/$ls"*
      done
    fi
  fi
}

trash-empty() {
  count="$(ls "$TrashDir/files/" | wc -l)"
  rm -Rf "$TrashDir/files/"
  rm -Rf "$TrashDir/info"
  mkd "$TrashDir/files/" "$TrashDir/info"
  printf_yellow "Deleted $count file from your system"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function

case $1 in
--help)
  __help
  ;;

list)
  shift 1
  trash-list "$@" 2>/dev/null | printf_readline "3"
  ;;

restore)
  shift 1
  trash-restore "$@" #2>/dev/null
  ;;

delete)
  shift 1
  trash-put "$@" #2>/dev/null
  ;;

empty)
  shift 1
  trash-empty #2>/dev/null
  ;;

*)
  [ $# -eq 0 ] && __help
  trash-put "$@" 2>/dev/null
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
